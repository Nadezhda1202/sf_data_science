# -*- coding: utf-8 -*-
"""Копия блокнота "baseline.ipynb"

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lkG20b0WCAjcBbEYGrjVSruSnjrrgBgi

# Угадай число
Нужно написать программу, которая угадывает число за минимальное число попыток.

## Условия соревнования
- Компьютер загадывает целое число от 1 до 100, и нам его нужно угадать. Под «угадать», подразумевается «написать программу, которая угадывает число».    
- Алгоритм учитывает информацию о том, больше ли случайное число или меньше нужного нам.
- Необходимо добиться того, чтобы программа угадывала число меньше, чем за 20 попыток.

Импортируем библиотеку, которая нам пригодится для генерации случайных чисел. В следующих темах вы познакомитесь с ней подробнее:
"""

import numpy as np

"""Ниже уже даны два простейших подхода к решению этой задачи. Посмотрим на них.

## Подход 1: Случайное угадывание

Простейший способ решения: научить программу случайным образом выбирать число до тех пор, пока оно не будет угадано. Этот способ не дает хорошего результата, однако будет для нас хорошей стартовой точкой.
"""

def random_predict(number: int = 1) -> int:
    """Просто угадываем на random, никак не используя информацию о больше или меньше.
       Функция принимает загаданное число и возвращает число попыток

    Args:
        number (int, optional): Загаданное число. Defaults to 1.

    Returns:
        int: Число попыток
    """
    count = 0

    while True:
        count += 1
        predict_number = np.random.randint(1, 101)  # предполагаемое число
        if number == predict_number:
            break  # выход из цикла если угадали

    return count

"""## Подход 2: Угадывание с коррекцией

Сначала устанавливаем любое случайное число, а потом уменьшаем или увеличиваем его в зависимости от того, больше оно или меньше нужного.
"""

def game_core_v2(number: int = 1) -> int:
    """Сначала устанавливаем любое random число, а потом уменьшаем
    или увеличиваем его в зависимости от того, больше оно или меньше нужного.
       Функция принимает загаданное число и возвращает число попыток

    Args:
        number (int, optional): Загаданное число. Defaults to 1.

    Returns:
        int: Число попыток
    """
    count = 0
    predict = np.random.randint(1, 101)

    while number != predict:
        count += 1
        if number > predict:
            predict += 1
        elif number < predict:
            predict -= 1

    return count

"""Посмотрим, как эти программы справляются с задачей.

## Функция для оценки

Эта функция необходима, чтобы определить, за какое число попыток программа угадывает наше число.
"""

def score_game(random_predict) -> int:
    """За какое количество попыток в среднем за 10000 подходов угадывает наш алгоритм

    Args:
        random_predict ([type]): функция угадывания

    Returns:
        int: среднее количество попыток
    """
    count_ls = []
    #np.random.seed(1)  # фиксируем сид для воспроизводимости
    random_array = np.random.randint(1, 101, size=(10000))  # загадали список чисел

    for number in random_array:
        count_ls.append(random_predict(number))

    score = int(np.mean(count_ls))
    print(f"Ваш алгоритм угадывает число в среднем за: {score} попытки")

"""## Оценка работы алгоритмов
Определяем, какой подход лучше.
"""

#Run benchmarking to score effectiveness of all algorithms
print('Run benchmarking for random_predict: ', end='')
score_game(random_predict)

print('Run benchmarking for game_core_v2: ', end='')
score_game(game_core_v2)

"""Как мы видим, две предложенные программы показывают не лучший результат.
Теперь вы попробуете решить эту задачу и найти более обтимальный алгоритм.

## Подход 3: Ваше решение

Напишите функцию, которая принимает на вход загаданное число и возвращает число попыток угадывания.
"""

def game_core_v3(number: int = 1) -> int:
    """
    Args:
        number (int, optional): Загаданное число. Defaults to 1.

    Returns:
        int: Число попыток
    """
    # Ваш код начинается здесь
    def counter(predict, number, count): # Отправляем наиболее близкое к number значение predict на последний этап поиска в функцию
        while number != predict:
          count += 1 #увеличиваем число попыток на 1
          if number > predict: #проверяем, осталось ли число больше загаданного
            predict += 1 
          elif number < predict: #проверяем, осталось ли число меньше загаданного
            predict -= 1
        return count, predict

    count = 0
    predict = np.random.randint(1, 101)

    while number != predict:
        count += 1
        if number >= 50: # сокращаем диапазон поиска вдвое
          if number >= 75: # сокращаем ещё в 2 раза
              if number >= 90: # стараемся выбрать наиболее близкое десятичное число (диапазон от 90 до 100)
                predict = 90
                count, predict = counter(predict, number, count) # возвращаем количество попыток и наиболее близкое к number значение predict на последний этап поиска в функцию
              if number < 90: # стараемся выбрать наиболее близкое десятичное число (диапазон от 76 до 89)
                predict = 76
                count, predict = counter(predict, number, count) # возвращаем количество попыток и наиболее близкое к number значение predict на последний этап поиска в функцию
          elif number <= 75: # сокращаем ещё в 2 раза
              if number >= 60: # стараемся выбрать наиболее близкое десятичное число (диапазон от 60 до 75)
                predict = 60
                count, predict = counter(predict, number, count) # возвращаем количество попыток и наиболее близкое к number значение predict на последний этап поиска в функцию
              if number < 60: # стараемся выбрать наиболее близкое десятичное число (диапазон от 51 до 59)
                predict = 51
                count, predict = counter(predict, number, count) # возвращаем количество попыток и наиболее близкое к number значение predict на последний этап поиска в функцию
        elif number < 50: # сокращаем диапазон поиска вдвое
          if number >= 25: # сокращаем ещё в 2 раза
              if number >= 40: # стараемся выбрать наиболее близкое десятичное число (диапазон от 40 до 50)
                predict = 40
                count, predict = counter(predict, number, count) # возвращаем количество попыток и наиболее близкое к number значение predict на последний этап поиска в функцию
              if number < 40: # стараемся выбрать наиболее близкое десятичное число (диапазон от 26 до 39)
                predict = 26
                count, predict = counter(predict, number, count) # возвращаем количество попыток и наиболее близкое к number значение predict на последний этап поиска в функцию
          elif number <= 25: # сокращаем ещё в 2 раза
              if number >= 15: # стараемся выбрать наиболее близкое десятичное число (диапазон от 15 до 25)
                predict = 15
                count, predict = counter(predict, number, count) # возвращаем количество попыток и наиболее близкое к number значение predict на последний этап поиска в функцию
              if number < 15: # стараемся выбрать наиболее близкое десятичное число (диапазон от 1 до 14)
                predict = 1
                count, predict = counter(predict, number, count) # возвращаем количество попыток и наиболее близкое к number значение predict на последний этап поиска в функцию
    # Ваш код заканчивается здесь

    return count

"""Оценим качество вашего алгоритма:"""

print('Run benchmarking for game_core_v3: ', end='')
score_game(game_core_v3)

"""Напомним, что для успешного решения задания программа должна угадывать число меньше чем за 20 попыток!"""